{
  "hash": "16ecbef56b9238251288abd2d45c18e0",
  "result": {
    "markdown": "---\ntitle: \"Visualizing BoardGameGeek data with **ggdensity**\"\nauthor: \"James Otto\"\ndate: \"2/15/2022\"\nimage: bgg_ggdensity.png\nformat: \n   html:\n     df-print: kable\n---\n\n\n\n\n## The Data\n\nIn this blog post, we're going to be looking at the <a href=\"https://boardgamegeek.com/\">BoardGameGeek</a> data from week 4 of TidyTuesday 2022.\nThis data set consists of community ratings and other stats for just over 20,000 board games. The first thing we need to do is load in the data and perform some basic cleaning, joining the `ratings` and `details` data on the `id` column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\n\ndata <- tidytuesdayR::tt_load('2022-01-25')\n\ndf <- data$ratings |>\n  left_join(data$details, by = \"id\")\n```\n:::\n\n\n<!-- Want the prev. chunk to be visible, more accessible -->\n\n\n::: {.cell hash='Visualizing-BoardGameGeek-Data-with-ggdensity_cache/html/data_loading_real_847a09e1e8ae06edc630f781c3079bc6'}\n\n:::\n\n\n## Looking at `boardgamecategory`\n\nSomething that immediately stands out to me is the variable `boardgamecategory`. Comparing stats across different types of board games could end up being really interesting! But, there is a problem---this column isn't \"tidy\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(df, name, boardgamecategory) |>\n  slice_head(n = 10)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|name              |boardgamecategory                                                                                                       |\n|:-----------------|:-----------------------------------------------------------------------------------------------------------------------|\n|Pandemic          |['Medical']                                                                                                             |\n|Carcassonne       |['City Building', 'Medieval', 'Territory Building']                                                                     |\n|Catan             |['Economic', 'Negotiation']                                                                                             |\n|7 Wonders         |['Ancient', 'Card Game', 'City Building', 'Civilization', 'Economic']                                                   |\n|Dominion          |['Card Game', 'Medieval']                                                                                               |\n|Ticket to Ride    |['Trains']                                                                                                              |\n|Codenames         |['Card Game', 'Deduction', 'Party Game', 'Spies/Secret Agents', 'Word Game']                                            |\n|Terraforming Mars |['Economic', 'Environmental', 'Industry / Manufacturing', 'Science Fiction', 'Space Exploration', 'Territory Building'] |\n|7 Wonders Duel    |['Ancient', 'Card Game', 'City Building', 'Civilization', 'Economic']                                                   |\n|Agricola          |['Animals', 'Economic', 'Farming']                                                                                      |\n\n</div>\n:::\n:::\n\n\nLuckily, this is an easy fix with some string processing. We can use `stringr::str_extract_all()` to extract the categories from each row into a list, then use `tidyr::unnest()` to flatten out the resulting list column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |>\n  filter(!is.na(boardgamecategory)) |>\n  mutate(boardgamecategory = str_extract_all(boardgamecategory, \"(?<=')[^,]*(?=')\")) |>\n  unnest(boardgamecategory)\n\nselect(df, name, boardgamecategory) |>\n  slice_head(n = 10)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|name        |boardgamecategory  |\n|:-----------|:------------------|\n|Pandemic    |Medical            |\n|Carcassonne |City Building      |\n|Carcassonne |Medieval           |\n|Carcassonne |Territory Building |\n|Catan       |Economic           |\n|Catan       |Negotiation        |\n|7 Wonders   |Ancient            |\n|7 Wonders   |Card Game          |\n|7 Wonders   |City Building      |\n|7 Wonders   |Civilization       |\n\n</div>\n:::\n:::\n\n\nGreat! Now, let's see what the most popular categories are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_categories <- df |>\n  group_by(boardgamecategory) |>\n  summarize(n = n()) |>\n  arrange(desc(n)) |>\n  slice_head(n = 10)\n\ntop_categories\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|boardgamecategory |    n|\n|:-----------------|----:|\n|Card Game         | 6402|\n|Wargame           | 3820|\n|Fantasy           | 2681|\n|Party Game        | 1968|\n|Dice              | 1847|\n|Science Fiction   | 1666|\n|Fighting          | 1658|\n|Abstract Strategy | 1545|\n|Economic          | 1503|\n|Animals           | 1354|\n\n</div>\n:::\n:::\n\n\nSurprisingly, the most popular board game category is \"Card Games\"!\nWe can create a simple visual showing the prevalence of each of these top 10 categories:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntop_categories |>\n  mutate(boardgamecategory = fct_reorder(boardgamecategory, n, .desc = TRUE)) |>\n  ggplot(aes(x = boardgamecategory, y = n)) +\n  geom_col() +\n  labs(\n    x = \"Category\",\n    y = NULL\n  )\n```\n\n::: {.cell-output-display}\n![](Visualizing-BoardGameGeek-Data-with-ggdensity_files/figure-html/plot_boardgamecategory_top10-1.png){width=1152}\n:::\n:::\n\n\n## Looking at `playingtime`, `minplayers`, and `maxplayers`\n\nLet's put the work that we've done on the categories field on hold for a minute and look at how a game's average number of players relates to its average play time. Before making any plots, I would suspect that as the number of players increases the average play time increases. That is to say, I would expect positive correlation between the two variables.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# First, we need to do a little more cleaning\n# Filter out some outliers, compute avg_players\ndf <- df |> \n  filter(maxplayers < 20) |>\n  filter(playingtime < 1000) |> \n  mutate(playingtime = playingtime / 60) |>\n  mutate(avg_players = (minplayers + maxplayers)/2) \n  \ndf |>\n  distinct(name, .keep_all = TRUE) |> # Don't care about categories right now\n  ggplot(aes(x = avg_players, y = playingtime)) +\n  geom_jitter(height = .5, width = .5, size = .1, alpha = .5) +\n  scale_x_continuous(breaks = seq(0, 12, by = 2)) +\n  scale_y_continuous(breaks = seq(0, 14, by = 2)) +\n  coord_cartesian(ylim = c(0, 14), expand = FALSE) +\n  labs(\n    x = \"Average no. of players\",\n    y = \"Average play time (Hours)\"\n  )\n```\n\n::: {.cell-output-display}\n![](Visualizing-BoardGameGeek-Data-with-ggdensity_files/figure-html/playtime_v_noplayers-1.png){width=1152}\n:::\n:::\n\n\nInterestingly, this does not seem to be the case! In fact it seems like it may be the opposite---play time appears to be maximized when there are between 2 and 4 players and drops off as the number of players increases.\n\nUnfortunately, the above plot has a few issues that stand in the way of us making useful observations. First, I have had to do some severe jittering to eliminate graphical artifacts resulting from the discrete nature of the data. Notice, several of the points seem to correspond to games with fewer than 0 average players! Second, there is pretty severe overplotting. Although I have attempted to avoid this by setting both the `size` and `alpha` arguments, the plot is still very crowded---especially around the horizontal axis between the 2 and 4 player ticks.\n\nFortunately, I know of a tool that can help with both of these issues---**ggdensity**!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(\"ggdensity\")\n\ndf |> \n  distinct(name, .keep_all = TRUE) |> # Don't care about categories right now\n  ggplot(aes(x = avg_players, y = playingtime)) +\n  geom_hdr(adjust = c(2, 4)) + # Need to set adjust b/c of discreteness\n  scale_x_continuous(breaks = seq(0, 12, by = 2)) +\n  scale_y_continuous(breaks = seq(0, 14, by = 2)) +\n  coord_cartesian(ylim = c(0, 14), expand = FALSE) +\n  labs(\n    x = \"Average no. of players\",\n    y = \"Average play time (Hours)\"\n  )\n```\n\n::: {.cell-output-display}\n![](Visualizing-BoardGameGeek-Data-with-ggdensity_files/figure-html/playtime_v_noplayers_ggdensity-1.png){width=1152}\n:::\n:::\n\n\nAbove, we are plotting estimated \"Highest Density Regions\" (HDRs)--- these are the smallest regions containing 50%, 80%, 95%, and 99% of the data (essentially). For more information, check out the **ggdensity** <a href=\"https://github.com/jamesotto852/ggdensity\">repo</a>. See that the issues of overplotting and jittering are eliminated as we have abandoned the strategy of plotting individual points. Now that we've taken care of these problems, we can see that there is a negative association between the average number of players and average play time. This is unexpected! Let's look a little deeper, leveraging our previous work on `boardgamecategory`.\n\n## Putting it all together\n\nDoes this negative association hold true across the most popular categories? Or is this yet another example of <a href=\"https://en.wikipedia.org/wiki/Simpson%27s_paradox\">Simpson's paradox</a>? There's only one way to find out---faceting!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ndf |> \n  filter(boardgamecategory %in% top_categories$boardgamecategory[1:5]) |>\n  mutate(boardgamecategory = fct_reorder(boardgamecategory, playingtime, mean, .desc = TRUE)) |>\n  ggplot(aes(x = avg_players, y = playingtime, fill = boardgamecategory)) +\n  geom_hdr(adjust = 2) + # Need to set adjust b/c of discreteness\n  facet_wrap(vars(boardgamecategory), ncol = 5) +\n  scale_x_continuous(breaks = seq(0, 12, by = 2)) +\n  scale_y_continuous(breaks = seq(0, 14, by = 2)) +\n  scale_fill_brewer(type = \"qual\", palette = 2, guide = NULL) +\n  coord_cartesian(ylim = c(0, 14), expand = FALSE) +\n  labs(\n    x = \"Average no. of players\",\n    y = \"Average play time (Hours)\"\n  )\n```\n\n::: {.cell-output-display}\n![](Visualizing-BoardGameGeek-Data-with-ggdensity_files/figure-html/playtime_v_noplayers_faceted-1.png){width=1152}\n:::\n:::\n\n\nThis plot offers a new perspective. In each category, it appears to be the case that average play time and number of players are independent. Also, it looks like \"Wargame\" board games tend to involve fewer players and last signficantly longer than other categories. Combining board games across categories creates the illusion that play time and number of players is negatively correlated---another point for Simpson!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}