y = NULL,
x = "Instances"
)
#| fig-height: 8
df_words <- df_words |>
filter(
! word %in% c(
# False-Negatives:
"plot", "stranger", "evil", "dead", "death", "doom", "die",
"kill", "died", "conflict", "tension", "corrupted",
# False-Positives:
"magic", "powerful"
)
)
df_words
df_words <- df_urls |>
unnest(tidy_body) |>
select(episode, book, comment_id, word) |>
inner_join(get_sentiments("bing"))
df_words
write_csv(here::here("posts/2022-10-15-Rings-of-Power/files/TRoP_comment_data.csv"))
write_csv
write_csv(here::here(df_words, "posts/2022-10-15-Rings-of-Power/files/TRoP_comment_data.csv"))
df_words
write_csv(df_words, here::here("posts/2022-10-15-Rings-of-Power/files/TRoP_comment_data.csv"))
df_urls
df_urls
df_urls_download <-
tibble(
episode = rep(2:7, times = 2),
book = rep(c(TRUE, FALSE), each = 6),
url = c(
# Book Spoiler threads:
"x3qfr2", # Ep 1, 2
"x9ngql", # Ep 3
"xfgxa1", # Ep 4
"xlmuu5", # Ep 5
"xrrbrm", # Ep 6
"xxoyqz", # Ep 7
# Non-Spoiler threads:
"x3qfqz", # Ep 1, 2
"x9ngqa", # Ep 3
"xfgx9y", # Ep 4
"xlmurh", # Ep 5
"xrrbtm", # Ep 6
"xxoyvo"  # Ep 7
)
) |>
mutate(
url = glue("https://www.reddit.com/r/RingsofPower/comments/{url}.json?sort=top&depth=1&limit=50")
)
df_urls_download <- df_urls_download |>
rowwise() |>
mutate(
comments = list(comments_as_df(url)),
)
df_urls_download
df_urls_download |>
unnest(comments)
df_urls_download |>
unnest(comments) |>
View()
drop_na
?drop_na
df_urls_download <-
tibble(
episode = rep(2:7, times = 2),
book = rep(c(TRUE, FALSE), each = 6),
url = c(
# Book Spoiler threads:
"x3qfr2", # Ep 1, 2
"x9ngql", # Ep 3
"xfgxa1", # Ep 4
"xlmuu5", # Ep 5
"xrrbrm", # Ep 6
"xxoyqz", # Ep 7
# Non-Spoiler threads:
"x3qfqz", # Ep 1, 2
"x9ngqa", # Ep 3
"xfgx9y", # Ep 4
"xlmurh", # Ep 5
"xrrbtm", # Ep 6
"xxoyvo"  # Ep 7
)
) |>
mutate(
url = glue("https://www.reddit.com/r/RingsofPower/comments/{url}.json?sort=top&depth=1&limit=50")
)
df_urls_download <- df_urls_download |>
rowwise() |>
mutate(comments = list(comments_as_df(url))) |>
unnest(comments) |>
drop_na(body)
df_urls_download
View(df_urls_download)
df_urls_download <- select(df_urls_download, -url)
View(df_urls_download)
write_csv(df_urls_download, here::here("posts/2022-10-15-Rings-of-Power/data/TRoP_comment_data.csv"))
#| message: false
#| code-fold: false
#| cache: false
# Interacting with Reddit API:
library("httr")
library("jsonlite")
# Manipulating data:
library("tidyverse")
library("tidytext")
library("glue")
# Plotting:
library("ggwordcloud")
library("showtext")
df_urls_download <-
tibble(
episode = rep(2:7, times = 2),
book = rep(c(TRUE, FALSE), each = 6),
url = c(
# Book Spoiler threads:
"x3qfr2", # Ep 1, 2
"x9ngql", # Ep 3
"xfgxa1", # Ep 4
"xlmuu5", # Ep 5
"xrrbrm", # Ep 6
"xxoyqz", # Ep 7
"y3j1zg", # Ep 8
# Non-Spoiler threads:
"x3qfqz", # Ep 1, 2
"x9ngqa", # Ep 3
"xfgx9y", # Ep 4
"xlmurh", # Ep 5
"xrrbtm", # Ep 6
"xxoyvo", # Ep 7
"y3j23u"  # Ep 8
)
) |>
mutate(
url = glue("https://www.reddit.com/r/RingsofPower/comments/{url}.json?sort=top&depth=1&limit=50")
)
df_urls_download <-
tibble(
episode = rep(2:8, times = 2),
book = rep(c(TRUE, FALSE), each = 7),
url = c(
# Book Spoiler threads:
"x3qfr2", # Ep 1, 2
"x9ngql", # Ep 3
"xfgxa1", # Ep 4
"xlmuu5", # Ep 5
"xrrbrm", # Ep 6
"xxoyqz", # Ep 7
"y3j1zg", # Ep 8
# Non-Spoiler threads:
"x3qfqz", # Ep 1, 2
"x9ngqa", # Ep 3
"xfgx9y", # Ep 4
"xlmurh", # Ep 5
"xrrbtm", # Ep 6
"xxoyvo", # Ep 7
"y3j23u"  # Ep 8
)
) |>
mutate(
url = glue("https://www.reddit.com/r/RingsofPower/comments/{url}.json?sort=top&depth=1&limit=50")
)
comments_as_df <- function(url) {
# Need to set user-agent header to avoid 429 error
res <- GET(url, add_headers("user-agent" = "Rings-of-Power-Scraping"))
data <- fromJSON(rawToChar(res$content))
data <- data$data$children[[2]]$data
data |>
select(body, score) |>
mutate(comment_id = 1:n())
}
df_urls_download <- df_urls_download |>
rowwise() |>
mutate(comments = list(comments_as_df(url))) |>
unnest(comments) |>
drop_na(body) |>
select(-url)
df_urls_download
View(df_urls_download)
write_csv(df_urls_download, here::here("posts/2022-10-15-Rings-of-Power/data/TRoP_comment_data.csv"))
# Chunk 1
#| message: false
#| code-fold: false
#| cache: false
# Interacting with Reddit API:
library("httr")
library("jsonlite")
# Manipulating data:
library("tidyverse")
library("tidytext")
library("glue")
# Plotting:
library("ggwordcloud")
library("showtext")
# Chunk 2
#| echo: false
#| cache: false
theme_set(theme_minimal())
theme_update(panel.grid.minor = element_blank())
# Chunk 3
#| code-fold: false
res <-
GET(
"https://www.reddit.com/r/RingsofPower/comments/xxoyqz.json?sort=top&depth=1&limit=50",
add_headers("user-agent" = "Rings-of-Power-Scraping")
)
data <- fromJSON(rawToChar(res$content))
data <- data$data$children[[2]]$data
# Chunk 4
#| code-fold: false
data$score
data$body[1:3]
# Chunk 5
#| message: false
#| fig-height: 8
df_urls <-
tibble(
episode = rep(2:8, times = 2),
book = rep(c(TRUE, FALSE), each = 7),
url = c(
# Book Spoiler threads:
"x3qfr2", # Ep 1, 2
"x9ngql", # Ep 3
"xfgxa1", # Ep 4
"xlmuu5", # Ep 5
"xrrbrm", # Ep 6
"xxoyqz", # Ep 7
"y3j1zg", # Ep 8
# Non-Spoiler threads:
"x3qfqz", # Ep 1, 2
"x9ngqa", # Ep 3
"xfgx9y", # Ep 4
"xlmurh", # Ep 5
"xrrbtm", # Ep 6
"xxoyvo", # Ep 7
"y3j23u"  # Ep 8
)
) |>
mutate(
url = glue("https://www.reddit.com/r/RingsofPower/comments/{url}.json?sort=top&depth=1&limit=50")
)
comments_as_df <- function(url) {
# Need to set user-agent header to avoid 429 error
res <- GET(url, add_headers("user-agent" = "Rings-of-Power-Scraping"))
data <- fromJSON(rawToChar(res$content))
data <- data$data$children[[2]]$data
data |>
select(body, score) |>
mutate(comment_id = 1:n())
}
df_urls <- df_urls |>
rowwise() |>
mutate(
comments = list(comments_as_df(url)),
)
# For each element (data.frame) in df_urls$comments,
# we're tokenizing with unnest_tokens() and removing stop words:
# df_urls$comments[[1]] |>
#   unnest_tokens(word, body) |>
#   anti_join(stop_words)
df_urls <- df_urls |>
mutate(
tidy_body = list(unnest_tokens(comments, word, body)),
tidy_body = list(anti_join(tidy_body, stop_words))
)
df_words <- df_urls |>
unnest(tidy_body) |>
select(episode, book, comment_id, word) |>
inner_join(get_sentiments("bing"))
df_words |>
count(word, sentiment, sort = TRUE) |>
group_by(sentiment) |>
slice_max(n, n = 20) |>
mutate(word = reorder(word, n)) |>
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(vars(sentiment), ncol = 1, scales = "free_y") +
labs(
y = NULL,
x = "Instances"
)
# Chunk 7
#| fig-height: 8
df_words <- df_words |>
filter(
! word %in% c(
# False-Negatives:
"plot", "stranger", "evil", "dead", "death", "doom", "die",
"kill", "died", "conflict", "tension", "corrupted",
# False-Positives:
"magic", "powerful"
)
)
df_words |>
count(word, sentiment, sort = TRUE) |>
group_by(sentiment) |>
slice_max(n, n = 20) |>
mutate(word = reorder(word, n)) |>
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(vars(sentiment), ncol = 1, scales = "free_y") +
labs(
y = NULL,
x = "Instances"
)
#| message: false
df_sentiments <- df_words |>
count(episode, book, comment_id, sentiment) |>
group_by(episode, book) |>
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) |>
mutate(sentiment = positive - negative) |>
summarize(avg_sentiment = mean(sentiment))
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
scale_x_continuous(labels = c("1 + 2", 3:8)) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path()
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
scale_x_continuous(labels = c("1 + 2", 3:8))
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
# scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
scale_x_continuous(labels = c("1 + 2", 3:8)) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
# scale_x_continuous(labels = c("1 + 2", 3:8)) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
scale_x_continuous(labels = c("1 + 2", 3:8)) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
scale_x_continuous(labels = c("1 + 2", 3:7)) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
# scale_x_continuous(labels = c("1 + 2", 3:8)) +
scale_x_continuous(labels = 2:8) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
# scale_x_continuous(labels = c("1 + 2", 3:8)) +
# scale_x_continuous(labels = 2:8) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
# scale_x_continuous(labels = c("1 + 2", 3:8)) +
scale_x_continuous(labels = 2:8) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
# scale_x_continuous(labels = c("1 + 2", 3:8)) +
scale_x_continuous(breaks = 2:8, labels = 2:8) +
theme(legend.position = "top")
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Casual Fans       ", "Book Readers")) +
scale_x_continuous(breaks = 2:8, labels = c("1 + 2", 3:8)) +
theme(legend.position = "top")
# Save w/ width = 1600px and height = 900px
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0) +
geom_point(size = 2.5, show.legend = FALSE) +
geom_path(size = 1.5, key_glyph = draw_key_timeseries) +
scale_color_manual(NULL, values = c("#376f52", "#47637e"), labels = c("Casual Fans       ", "Book Readers")) +
scale_x_continuous(breaks = 2:8, labels = c("1 & 2", 3:8)) +
labs(
x = "Episode",
y = "Average Comment Sentiment",
caption = "Data from /r/RingsofPower \n Created by @jamesotto852"
) +
theme(
text = element_text("MedievalSharp", colour = "#534137"),
plot.caption = element_text("Roboto Condensed", size = 15),
axis.title = element_text(size = 21),
axis.text = element_text(size = 15),
axis.title.y = element_text(margin = margin(r = 10)),
legend.text = element_text(size = 18),
legend.position = "top",
legend.key.size = unit(.4, "cm"),
panel.grid.major.y = element_line(colour = alpha("black", .1)),
panel.grid.major.x = element_blank(),
plot.background = element_rect(fill = "#ffe791"),
plot.margin = unit(rep(.8, 4), "cm")
)
#| eval: false
font_add_google("MedievalSharp")
font_add_google("Roboto Condensed")
showtext_auto()
# Save w/ width = 1600px and height = 900px
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0) +
geom_point(size = 2.5, show.legend = FALSE) +
geom_path(size = 1.5, key_glyph = draw_key_timeseries) +
scale_color_manual(NULL, values = c("#376f52", "#47637e"), labels = c("Casual Fans       ", "Book Readers")) +
scale_x_continuous(breaks = 2:8, labels = c("1 & 2", 3:8)) +
labs(
x = "Episode",
y = "Average Comment Sentiment",
caption = "Data from /r/RingsofPower \n Created by @jamesotto852"
) +
theme(
text = element_text("MedievalSharp", colour = "#534137"),
plot.caption = element_text("Roboto Condensed", size = 15),
axis.title = element_text(size = 21),
axis.text = element_text(size = 15),
axis.title.y = element_text(margin = margin(r = 10)),
legend.text = element_text(size = 18),
legend.position = "top",
legend.key.size = unit(.4, "cm"),
panel.grid.major.y = element_line(colour = alpha("black", .1)),
panel.grid.major.x = element_blank(),
plot.background = element_rect(fill = "#ffe791"),
plot.margin = unit(rep(.8, 4), "cm")
)
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0, linetype = "dashed") +
geom_point() +
geom_path() +
scale_color_manual(NULL, values = c("slateblue", "firebrick"), labels = c("Non-Book Readers       ", "Book Readers")) +
scale_x_continuous(breaks = 2:8, labels = c("1 + 2", 3:8)) +
theme(legend.position = "top")
# Save w/ width = 1600px and height = 900px
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0) +
geom_point(size = 2.5, show.legend = FALSE) +
geom_path(size = 1.5, key_glyph = draw_key_timeseries) +
scale_color_manual(NULL, values = c("#376f52", "#47637e"), labels = c("Non-Book Readers       ", "Book Readers")) +
scale_x_continuous(breaks = 2:8, labels = c("1 & 2", 3:8)) +
labs(
x = "Episode",
y = "Average Comment Sentiment",
caption = "Data from /r/RingsofPower \n Created by @jamesotto852"
) +
theme(
text = element_text("MedievalSharp", colour = "#534137"),
plot.caption = element_text("Roboto Condensed", size = 15),
axis.title = element_text(size = 21),
axis.text = element_text(size = 15),
axis.title.y = element_text(margin = margin(r = 10)),
legend.text = element_text(size = 18),
legend.position = "top",
legend.key.size = unit(.4, "cm"),
panel.grid.major.y = element_line(colour = alpha("black", .1)),
panel.grid.major.x = element_blank(),
plot.background = element_rect(fill = "#ffe791"),
plot.margin = unit(rep(.8, 4), "cm")
)
# Save w/ width = 1600px and height = 900px
ggplot(df_sentiments, aes(episode, avg_sentiment, color = book, group = book)) +
geom_abline(slope = 0, intercept = 0) +
geom_point(size = 2.5, show.legend = FALSE) +
geom_path(size = 1.5, key_glyph = draw_key_timeseries) +
scale_color_manual(NULL, values = c("#376f52", "#47637e"), labels = c("Non-Book Readers       ", "Book Readers")) +
scale_x_continuous(breaks = 2:8, labels = c("1 & 2", 3:8)) +
labs(
x = "Episode",
y = "Average Sentiment",
caption = "Data from /r/RingsofPower \n Created by @jamesotto852"
) +
theme(
text = element_text("MedievalSharp", colour = "#534137"),
plot.caption = element_text("Roboto Condensed", size = 15),
axis.title = element_text(size = 21),
axis.text = element_text(size = 15),
axis.title.y = element_text(margin = margin(r = 10)),
legend.text = element_text(size = 18),
legend.position = "top",
legend.key.size = unit(.4, "cm"),
panel.grid.major.y = element_line(colour = alpha("black", .1)),
panel.grid.major.x = element_blank(),
plot.background = element_rect(fill = "#ffe791"),
plot.margin = unit(rep(.8, 4), "cm")
)
